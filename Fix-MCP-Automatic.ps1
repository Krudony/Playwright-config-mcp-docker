# MCP Auto-Fix Script
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MCP ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

param(
    [switch]$Force,
    [switch]$Verbose
)

function Write-ColorText {
    param([string]$Text, [string]$Color = "White")
    Write-Host $Text -ForegroundColor $Color
}

function Test-AdminRights {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Set-EnvironmentVariables {
    Write-ColorText "=== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables ===" "Yellow"

    $envVars = @{
        "CLAUDE_CONFIG_DIR" = "$env:USERPROFILE\.claude-zz"
        "ANTHROPIC_BASE_URL" = "https://api.z.ai/api/anthropic"
        "ANTHROPIC_AUTH_TOKEN" = "YOUR_TOKEN_HERE"
        "ANTHROPIC_MODEL" = "glm-4.6"
    }

    foreach ($var in $envVars.GetEnumerator()) {
        try {
            [Environment]::SetEnvironmentVariable($var.Key, $var.Value, "User")
            $env:$($var.Key) = $var.Value
            Write-ColorText "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ $($var.Key) = $($var.Value)" "Green"
        } catch {
            Write-ColorText "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ $($var.Key) ‡πÑ‡∏î‡πâ: $($_.Exception.Message)" "Red"
        }
    }
}

function Create-ConfigDirectory {
    Write-ColorText "=== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Config ===" "Yellow"

    $configDir = "$env:USERPROFILE\.claude-zz"

    try {
        if (!(Test-Path $configDir)) {
            New-Item -ItemType Directory -Force -Path $configDir | Out-Null
            Write-ColorText "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: $configDir" "Green"
        } else {
            Write-ColorText "‚ÑπÔ∏è ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: $configDir" "Cyan"
        }
    } catch {
        Write-ColorText "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: $($_.Exception.Message)" "Red"
        return $false
    }
    return $true
}

function Create-MCPConfigFile {
    Write-ColorText "=== ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Config ===" "Yellow"

    $configPath = "$env:USERPROFILE\.claude-zz\claude_desktop_config.json"

    try {
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if ((Test-Path $configPath) -and !$Force) {
            Write-ColorText "‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå config ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ -Force ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö" "Yellow"
            return $false
        }

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á config ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        $config = @{
            mcpServers = @{
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° MCP servers ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                "filesystem" = @{
                    command = "npx"
                    args = @("-y", "@modelcontextprotocol/server-filesystem", "C:\Users\User\Documents")
                }
            }
        }

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        $jsonContent = $config | ConvertTo-Json -Depth 10
        Set-Content -Path $configPath -Value $jsonContent -Encoding UTF8

        Write-ColorText "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config: $configPath" "Green"
        return $true

    } catch {
        Write-ColorText "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config ‡πÑ‡∏î‡πâ: $($_.Exception.Message)" "Red"
        return $false
    }
}

function Install-MCPServers {
    Write-ColorText "=== ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MCP Servers ===" "Yellow"

    try {
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js
        try {
            $nodeVersion = node --version 2>$null
            Write-ColorText "‚úÖ Node.js: $nodeVersion" "Green"
        } catch {
            Write-ColorText "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Node.js ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å https://nodejs.org" "Red"
            return $false
        }

        # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MCP servers
        $servers = @(
            "@modelcontextprotocol/server-filesystem",
            "@modelcontextprotocol/server-github",
            "@modelcontextprotocol/server-web-search"
        )

        foreach ($server in $servers) {
            Write-ColorText "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á $server..." "Cyan"
            try {
                $result = npx -y $server --version 2>$null
                if ($LASTEXITCODE -eq 0) {
                    Write-ColorText "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á $server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" "Green"
                }
            } catch {
                Write-ColorText "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á $server: $($_.Exception.Message)" "Yellow"
            }
        }

    } catch {
        Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MCP servers: $($_.Exception.Message)" "Red"
        return $false
    }
    return $true
}

function Test-MCPConfiguration {
    Write-ColorText "=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ===" "Yellow"

    $allGood = $true

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
    $envVars = @("CLAUDE_CONFIG_DIR", "ANTHROPIC_BASE_URL", "ANTHROPIC_AUTH_TOKEN", "ANTHROPIC_MODEL")

    foreach ($var in $envVars) {
        $value = [Environment]::GetEnvironmentVariable($var, "User")
        if ($value) {
            Write-ColorText "‚úÖ $var = $value" "Green"
        } else {
            Write-ColorText "‚ùå $var = Not Set" "Red"
            $allGood = $false
        }
    }

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Config
    $configPath = "$env:USERPROFILE\.claude-zz\claude_desktop_config.json"
    if (Test-Path $configPath) {
        Write-ColorText "‚úÖ ‡πÑ‡∏ü‡∏•‡πå config ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: $configPath" "Green"

        try {
            $config = Get-Content $configPath | ConvertFrom-Json
            if ($config.mcpServers) {
                $serverCount = $config.mcpServers.PSObject.Properties.Count
                Write-ColorText "‚úÖ ‡∏°‡∏µ MCP servers: $serverCount ‡∏ï‡∏±‡∏ß" "Green"
            }
        } catch {
            Write-ColorText "‚ùå ‡πÑ‡∏ü‡∏•‡πå config ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" "Red"
            $allGood = $false
        }
    } else {
        Write-ColorText "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config: $configPath" "Red"
        $allGood = $false
    }

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    $tools = @("node", "npx")
    foreach ($tool in $tools) {
        try {
            $version = & $tool --version 2>$null
            Write-ColorText "‚úÖ $tool : $version" "Green"
        } catch {
            Write-ColorText "‚ùå $tool : Not found" "Red"
            $allGood = $false
        }
    }

    return $allGood
}

# Main execution
Write-ColorText "üîß MCP Auto-Fix Script" "Cyan"
Write-ColorText "====================" "Cyan"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin
if (Test-AdminRights) {
    Write-ColorText "‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin" "Green"
} else {
    Write-ColorText "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin" "Yellow"
}

# ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
try {
    Write-ColorText "`nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤..." "Cyan"

    Set-EnvironmentVariables

    if (Create-ConfigDirectory) {
        Create-MCPConfigFile
    }

    Install-MCPServers

    Write-ColorText "`n‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!" "Green"

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    $testResult = Test-MCPConfiguration

    Write-ColorText "`nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:" "Yellow"
    if ($testResult) {
        Write-ColorText "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MCP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!" "Green"
        Write-ColorText "`nüöÄ ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö:" "Cyan"
        Write-ColorText "claude --dangerously-skip-permissions chat" "White"
    } else {
        Write-ColorText "‚ùå ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô" "Red"
    }

} catch {
    Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: $($_.Exception.Message)" "Red"
}

Write-ColorText "`n‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó PowerShell ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Environment Variables ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå" "Yellow"