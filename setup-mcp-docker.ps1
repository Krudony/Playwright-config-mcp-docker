# MCP Docker Setup Script for Windows (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
# Author: Claude Code Assistant
# Version: 1.0

param(
    [switch]$Force,
    [switch]$Verbose
)

Write-Host "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MCP Docker ‡∏ö‡∏ô Windows..." -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Yellow

# Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ command ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function Test-Command {
    param($Command)
    try {
        $null = Get-Command $Command -ErrorAction Stop
        return $true
    }
    catch {
        return $false
    }
}

# Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
function Write-Status {
    param($Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

# Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Requirements
Write-Status "`n=== Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Requirements ===" "Cyan"

$requirements = @(
    @{Name="Docker"; Command="docker"},
    @{Name="Node.js"; Command="node"},
    @{Name="NPM"; Command="npm"}
)

$allRequirementsMet = $true
foreach ($req in $requirements) {
    if (Test-Command $req.Command) {
        Write-Status "‚úÖ $($req.Name) ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß" "Green"
    } else {
        Write-Status "‚ùå $($req.Name) ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á" "Red"
        $allRequirementsMet = $false
    }
}

if (-not $allRequirementsMet) {
    Write-Status "`n‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á requirements ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠" "Red"
    Write-Status "Download: Docker Desktop ‡πÅ‡∏•‡∏∞ Node.js" "Yellow"
    exit 1
}

# Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Directories
Write-Status "`n=== Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Directories ===" "Cyan"

$claudeDir = "$env:USERPROFILE\.claude"
$mcpServersDir = "$env:USERPROFILE\.claude\mcp-servers"

try {
    New-Item -ItemType Directory -Path $claudeDir -Force -ErrorAction Stop | Out-Null
    Write-Status "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Claude directory: $claudeDir" "Green"

    New-Item -ItemType Directory -Path $mcpServersDir -Force -ErrorAction Stop | Out-Null
    Write-Status "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á MCP servers directory: $mcpServersDir" "Green"
} catch {
    Write-Status "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á directories: $_" "Red"
    exit 1
}

# Step 3: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MCP Packages
Write-Status "`n=== Step 3: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MCP Packages ===" "Cyan"

$packages = @(
    "@mcp-docker/server",
    "@playwright/mcp@latest"
)

foreach ($package in $packages) {
    Write-Status "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á $package..." "Yellow"
    try {
        $installResult = npm install -g $package 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Status "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á $package ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" "Green"
        } else {
            Write-Status "‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á $package ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $installResult" "Red"
            if (-not $Force) {
                exit 1
            }
        }
    } catch {
        Write-Status "‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á $package ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $_" "Red"
        if (-not $Force) {
            exit 1
        }
    }
}

# Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á Configuration Files
Write-Status "`n=== Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á Configuration Files ===" "Cyan"

# Claude Desktop Config
$claudeConfig = @"
{
  "mcpServers": {
    "docker": {
      "command": "npx",
      "args": ["@mcp-docker/server", "--docker-host", "npipe:////./pipe/docker_engine"],
      "env": {
        "DOCKER_HOST": "npipe:////./pipe/docker_engine"
      }
    },
    "playwright": {
      "command": "npx",
      "args": ["@playwright/mcp@latest", "--config=./playwright-headful-config.json"]
    }
  }
}
"@

$claudeConfigPath = "$claudeDir\claude_desktop_config.json"
try {
    $claudeConfig | Out-File -FilePath $claudeConfigPath -Encoding UTF8 -Force
    Write-Status "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Claude config: $claudeConfigPath" "Green"
} catch {
    Write-Status "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Claude config: $_" "Red"
    exit 1
}

# Docker MCP Config
$dockerMcpConfig = @"
{
  "name": "docker",
  "command": "npx",
  "args": ["@mcp-docker/server"],
  "env": {
    "DOCKER_HOST": "npipe:////./pipe/docker_engine"
  }
}
"@

$dockerMcpConfigPath = "$mcpServersDir\docker.json"
try {
    $dockerMcpConfig | Out-File -FilePath $dockerMcpConfigPath -Encoding UTF8 -Force
    Write-Status "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker MCP config: $dockerMcpConfigPath" "Green"
} catch {
    Write-Status "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker MCP config: $_" "Red"
    exit 1
}

# Step 5: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables
Write-Status "`n=== Step 5: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables ===" "Cyan"

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
$env:DOCKER_HOST = "npipe:////./pipe/docker_engine"
$env:ANTHROPIC_MODEL = "glm-4.6"

Write-Status "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DOCKER_HOST: $env:DOCKER_HOST" "Green"
Write-Status "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ANTHROPIC_MODEL: $env:ANTHROPIC_MODEL" "Green"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö set environment variables ‡∏ñ‡∏≤‡∏ß‡∏£
$envScript = @"
# MCP Docker Environment Variables
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô PowerShell Profile ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏≤‡∏ß‡∏£

# Docker Host for Windows
`$env:DOCKER_HOST = "npipe:////./pipe/docker_engine"

# Anthropic Model
`$env:ANTHROPIC_MODEL = "glm-4.6"

# ‡πÄ‡∏û‡∏¥‡πà‡∏° ANTHROPIC_API_KEY ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
if (-not `$env:ANTHROPIC_API_KEY) {
    Write-Host "‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ANTHROPIC_API_KEY" -ForegroundColor Yellow
    Write-Host "`$env:ANTHROPIC_API_KEY = 'your-api-key-here'" -ForegroundColor Gray
}
"@

$envScriptPath = "$claudeDir\set-environment.ps1"
try {
    $envScript | Out-File -FilePath $envScriptPath -Encoding UTF8 -Force
    Write-Status "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á environment script: $envScriptPath" "Green"
} catch {
    Write-Status "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á environment script: $_" "Red"
}

# Step 6: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
Write-Status "`n=== Step 6: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ===" "Cyan"

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Docker connection
Write-Status "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Docker connection..." "Yellow"
try {
    $dockerTest = docker version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Status "‚úÖ Docker connection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" "Green"
    } else {
        Write-Status "‚ùå Docker connection ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $dockerTest" "Red"
    }
} catch {
    Write-Status "‚ùå Docker connection ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $_" "Red"
}

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP server
Write-Status "‡∏ó‡∏î‡∏™‡∏≠‡∏ö MCP Docker server..." "Yellow"
try {
    $mcpTest = npx @mcp-docker/server --help 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Status "‚úÖ MCP Docker server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" "Green"
    } else {
        Write-Status "‚ùå MCP Docker server ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $mcpTest" "Red"
    }
} catch {
    Write-Status "‚ùå MCP Docker server ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $_" "Red"
}

# Step 7: ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
Write-Status "`n=== üéâ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå! ===" "Green"
Write-Status "`nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:" "Yellow"
Write-Status "1. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Docker Desktop (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)" "White"
Write-Status "2. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Claude Desktop" "White"
Write-Status "3. ‡πÄ‡∏õ‡∏¥‡∏î Claude ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:" "White"
Write-Status "   `$env:ANTHROPIC_API_KEY='your-api-key'; `$env:ANTHROPIC_MODEL='glm-4.6'; claude --dangerously-skip-permissions chat" "Gray"
Write-Status "4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Claude ‡πÄ‡∏´‡πá‡∏ô MCP Docker tools" "White"

Write-Status "`nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:" "Cyan"
Write-Status "- Claude Config: $claudeConfigPath" "Gray"
Write-Status "- Docker MCP Config: $dockerMcpConfigPath" "Gray"
Write-Status "- Environment Script: $envScriptPath" "Gray"

Write-Status "`nüîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment ‡∏ñ‡∏≤‡∏ß‡∏£:" "Cyan"
Write-Status "‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô PowerShell (Administrator):" "Yellow"
Write-Status ". '$envScriptPath'" "Gray"

if ($Verbose) {
    Write-Status "`nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:" "Magenta"
    Write-Status "User Profile: $env:USERPROFILE" "Gray"
    Write-Status "Claude Directory: $claudeDir" "Gray"
    Write-Status "MCP Servers Directory: $mcpServersDir" "Gray"
    Write-Status "Docker Host: $env:DOCKER_HOST" "Gray"
    Write-Status "Anthropic Model: $env:ANTHROPIC_MODEL" "Gray"
}

Write-Status "`n‚ú® ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MCP Docker ‡∏™‡∏ô‡∏∏‡∏Å!" "Green"